function decodeEntities(str) {
  if (!str || typeof str !== "string") return "";
  return str.replace(/&amp;/g, "&");
}

function isAdRelated(text) {
  const patterns = [
    /—Ä–µ–∫–ª–∞–º/i,
    /—Ä–µ–∫–ª–∞–º–∞/i,
    /\b–≤–∑–∞–∏–º–Ω–∞—è\s+—Ä–µ–∫–ª–∞–º–∞\b/i,
    /—Ä–µ–∫–ª–∞–º–∞\s*#?\d+/i,
    /—Ä–µ–∫–ª–∞–º–∞\s*\/\/\s*\d+/i,
    /–≤–∞—à–∞\s+—Ä–µ–∫–ª–∞–º–∞/i,
    /–Ω–∞—à–∞\s+—Ä–µ–∫–ª–∞–º–∞/i,
    /—Ä–µ–∫–ª–∞–º–Ω—ã–µ\s+–ª–∏—Å—Ç–æ–≤–∫–∏/i,
    /–ª–∏—Å—Ç–æ–≤–∫–∏/i,
    /–±–∞–Ω–µ—Ä–æ–æ–±–º–µ–Ω/i
  ];
  return patterns.some(p => p.test(text));
}

function checkForNewAdTopicsUnified() {
  const ss = SpreadsheetApp.openById("1jxbsJM2oJiVXUqJmGBFgyZ409tf9LQeW3mYzmk0sZPQ");
  const sheet = ss.getSheetByName("automatic —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (05.25)");
  const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 7).getValues();

  const keywords = ["—Ä–µ–∫–ª–∞–º–∞", "–≤–∞—à–∞", "–Ω–∞—à–∞", "–ª–∏—Å—Ç–æ–≤–∫–∏", "pr", "–ø–∏–∞—Ä", "–ø—ã–ª—å"];
  const excludeWords = ["–ø–∞—Ä—Ç–Ω–µ—Ä—ã", "–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ", "partners", "—Ä–µ–∫–ª–∞–º–∞ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤", "–ø–∏–∞—Ä –æ—Ç"];
  const domainRegex = /^(https?:\/\/[^\/]+)/;
  const topicRegex = /viewtopic\.php\?id=(\d+)/;

  for (let i = 0; i < data.length; i++) {
    const [originalLink, domainCell] = data[i];
    Logger.log(`‚ñ∂ –°—Ç—Ä–æ–∫–∞ ${i + 2}`);
    Logger.log(`üîó A: ${originalLink}`);

    if (!originalLink || !originalLink.startsWith("http")) continue;

    const domainMatch = originalLink.match(domainRegex);
    const originalIdMatch = originalLink.match(topicRegex);
    if (!domainMatch || !originalIdMatch) continue;

    const domain = domainMatch[1];
    const originalId = originalIdMatch ? parseInt(originalIdMatch[1], 10) : null;

    const targetPage = domain + "/";

    let fallbackLink = null;
    let lastAdVisibleText = null;
    let lastAdLink = null;

    try {
      const response = UrlFetchApp.fetch(targetPage, { muteHttpExceptions: true });

      let html;
      try {
        html = Utilities.newBlob(response.getContent()).getDataAsString("Windows-1251");
        Logger.log("üì¶ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: Windows-1251 —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞");
      } catch (e) {
        html = response.getContentText();
        Logger.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é UTF-8 (Windows-1251 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)");
      }

      const trBlocks = [...html.matchAll(/<tr[^>]*>([\s\S]*?)<\/tr>/gi)];

      for (const tr of trBlocks) {
        const trHtml = tr[0].toLowerCase();
        let visibleText = trHtml.replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ').trim();

        let fixedText;
        try {
          fixedText = decodeURIComponent(escape(visibleText));
        } catch (e) {
          fixedText = visibleText;
        }

        const matched = isAdRelated(visibleText) || isAdRelated(fixedText);
        if (!matched) continue;
        if (excludeWords.some(ex => visibleText.includes(ex) || fixedText.includes(ex))) continue;

        lastAdVisibleText = visibleText;

        const linkMatch = trHtml.match(/<a[^>]+class=["']lastpost-link["'][^>]*href=["']([^"']+)["']/i);
        if (linkMatch) {
          const rawHref = decodeEntities(linkMatch[1]);
          const topicMatch = rawHref.match(topicRegex);
          if (!topicMatch) continue;

          const newId = parseInt(topicMatch[1], 10);
          const fullLink = domain + "/viewtopic.php?id=" + newId;
          lastAdLink = fullLink;

          if (newId > originalId) {
            Logger.log(`üü¢ –ù–æ–≤–∞—è —Ç–µ–º–∞! ID ${newId} > ${originalId}`);
            sheet.getRange(i + 2, 3).setValue(fullLink);
            sheet.getRange(i + 2, 4).setValue("üü¢ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Ç–µ–º–∞!");
            sheet.getRange(i + 2, 5).setValue("–∫–ª—é—á: —Ä–µ–∫–ª–∞–º–∞");
            sheet.getRange(i + 2, 1, 1, 7).setBackground("#d4edda");
            break;
          } else {
            fallbackLink = fullLink;
            Logger.log(`‚ÑπÔ∏è –ù–∞—à–ª–∏, –Ω–æ ID —Å—Ç–∞—Ä—ã–π: ${newId}`);
          }
        }
      }

      const existingC = sheet.getRange(i + 2, 3).getValue();
      // ‚úÖ –í—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ F –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Å—ã–ª–∫—É
      if (fallbackLink) {
        Logger.log(`üîó F: –∑–∞–ø–∏—Å—ã–≤–∞—é —Å—Å—ã–ª–∫—É ${fallbackLink}`);
        sheet.getRange(i + 2, 6).setValue(fallbackLink);
      }


      if (!domainCell || domainCell.toString().trim() === "") {
        sheet.getRange(i + 2, 2).setValue(domain);
      }

      if (lastAdVisibleText) {
        sheet.getRange(i + 2, 7).setValue(lastAdVisibleText); // G ‚Äî —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã
        Logger.log(`üìù G: ${lastAdVisibleText}`);
      }

      if (lastAdLink) {
        sheet.getRange(i + 2, 6).setValue(lastAdLink); // F ‚Äî –Ω–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞
        Logger.log(`üîó F: ${lastAdLink}`);
      }

    } catch (e) {
      Logger.log(`‚ùå –û—à–∏–±–∫–∞ —É ${originalLink}: ${e}`);
      sheet.getRange(i + 2, 3).setValue("‚ùå –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }
  }


//  Logger.log(`üìå ID –∏–∑ A (original): ${originalId}`);
//  Logger.log(`üìå ID –Ω–æ–≤–æ–π —Ç–µ–º—ã (–Ω–∞–π–¥–µ–Ω–Ω–æ–π): ${newId}`);
//  Logger.log("‚úÖ –ì–æ—Ç–æ–≤–æ");
}
S
